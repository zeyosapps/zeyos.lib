<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE ixml SYSTEM "https://developers.zeyos.com/schema/ixml.dtd">
<ixml
	xmlns="https://developers.zeyos.com/schema/ixml"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="https://developers.zeyos.com/schema/ixml https://developers.zeyos.com/schema/ixml.xsd">

	<!--
		@function len
		@description Returns the length of a string
	-->
	<function var="return.len">
		<length var="return">$return</length>
	</function>

	<!--
		@function addZero
		@description Add a leading zero to a number from 0-9
	-->
	<function var="return.addZero">
		<if value1="$return" value2="10" func="&lt;">
			<set var="return">0$return</set>
		</if>
	</function>

	<!--
		@function formatTime
		@description Formats time in Minutes into an hours (H:M)
	-->
	<function var="return.formatTime">
		<math:floor var="hours">$($return / 60)</math:floor>
		<set var="minutes">$($return % 60)</set>
		<if value1="$minutes" value2="10" func="&lt;">
			<set var="minutes">0$minutes</set>
		</if>
		<set var="return">$hours:$minutes</set>
	</function>

	<function var="return.toNumber">
		<replace var="return" pattern="/[^0-9,\.]/">$return</replace>
		<pos value="," var="posComma">$return</pos>
		<pos value="," var="posCommaLast" type="chars-last">$return</pos>
		<pos value="." var="posDot">$return</pos>
		<pos value="." var="posDotLast" type="chars-last">$return</pos>

		<is var="posComma" type="null">
			<if value1="$posDotLast" value2="$posDot" func="!=">
				<true var="eur" />
			</if>
		<else>
			<is var="posDot" type="null">
				<true var="eur" />
			<elseif value1="$posDot" value2="$posComma" func="&lt;">
				<true var="eur" />
			</elseif>
			</is>
		</else>
		</is>

		<is var="eur" type="true">
			<replace value="," replacement="." var="return">
				<replace value=".">$return</replace>
			</replace>
		<else>
			<replace value="," var="return">$return</replace>
		</else>
		</is>

		<!--
		<set var="return">$($return)</set>
		<cast var="return" type="float" />
		-->
	</function>

	<function var="return.convertGroupNumberToText">
			<set var="result"></set>
			<set var="groupLevel">$($groupLevel)</set>
			<if value1="$groupLevel" value2="0">
					<set var="number">$return</set>
			</if>
			<if value1="$($number)" value2="0">
					<return/>
			</if>

			<set var="groupNumber">$($number % 1000)</set>
			<if value1="$groupNumber" value2="1">
					<set var="result">$LANGUAGE.labels.numerals.numerals[1]$$LANGUAGE.labels.numerals.groups[$groupLevel][0]</set>
					<elseif value1="$groupNumber" func="&gt;" value2="1">
							<set var="result"></set>
							<math:floor var="firstDigit">$($groupNumber / 100)</math:floor>
							<if value1="$firstDigit" func="&gt;" value2="0">
									<concat var="result">$LANGUAGE.labels.numerals.numerals[$firstDigit]$$LANGUAGE.labels.numerals.hundred</concat>
							</if>
							<set var="lastDigits">$($groupNumber % 100)</set>
							<math:floor var="secondDigit">$($lastDigits / 10)</math:floor>
							<set var="thirdDigit">$($lastDigits % 10)</set>

							<if value1="$lastDigits" value2="1">
									<concat var="result">$LANGUAGE.labels.numerals.numerals[1]$s</concat>
									<elseif value1="$lastDigits" func="&lt;" value2="20">
											<if value1="$lastDigits" func="&gt;" value2="1">
													<concat var="result">$LANGUAGE.labels.numerals.numerals[$lastDigits]</concat>
											</if>
									</elseif>
									<elseif value1="$lastDigits" func="&gt;=" value2="20">
											<if value1="$thirdDigit" func="&gt;" value2="0">
													<concat var="result">$LANGUAGE.labels.numerals.numerals[$thirdDigit]$$LANGUAGE.labels.numerals.and</concat>
											</if>
											<concat var="result">$LANGUAGE.labels.numerals.tenners[$secondDigit]</concat>
									</elseif>
							</if>

							<concat var="result">$LANGUAGE.labels.numerals.groups[$groupLevel][1]</concat>
					</elseif>
			</if>

			<math:inc var="groupLevel"/>
			<call func="this.convertGroupNumberToText" var="return">
					<param name="number"><math:floor>$($number / 1000)</math:floor></param>
					<param var="groupLevel"/>
			</call>
			<concat var="return">$result</concat>
	</function>


	<function var="return.convertNumberToText">
		<call func="LANGUAGE.section" var="LANGUAGE.labels.numerals">
			<param name="section">numerals</param>
		</call>

		<replace var="return" pattern="/(\d+)[\.,]\d+/" replacement="$$1">$return</replace>

		<if value1="$($return)" value2="0">
			<set var="return">$LANGUAGE.labels.numerals.numerals[0]</set>
			<elseif value1="$return" func="&lt;" value2="0">
				<set var="return">$LANGUAGE.labels.numerals.minus $LIB.convertGroupNumberToText($(-1 * $return))</set>
			</elseif>
			<else>
				<set var="return">$this.convertGroupNumberToText($return)</set>
			</else>
		</if>
	</function>

	<!--
		@param text
	-->
	<function var="return.parseParams">
		<array var="return">
			<array key="params" />
			<item key="text"></item>
		</array>
		<set var="a">\"</set>
		<split pattern="/\r\n|\n|\r/u" var="lines">$text</split>
		<foreach var="lines" var_value="line">
			<match var_matches="match" pattern="/^@([a-z]+):([a-z_]+)\s+$a$([^$a$]+)$a$(\s+$a$([^$a$]+)$a)?$/" var="count">$line</match>
			<if value1="$count" value2="1">
				<array var="return.params[]">
					<item key="type">$match[0][1]</item>
					<item key="id">$match[0][2]</item>
					<item key="label">$match[0][3]</item>
					<item key="default">$match[0][5]</item>
				</array>
				<next />
			</if>
			<concat var="return.text">$line&n;</concat>
		</foreach>

		<trim var="return.text">$return.text</trim>
	</function>

</ixml>
